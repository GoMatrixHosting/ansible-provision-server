
# Append to server_vars.yml variable file (non-updatable)

- name: Add do_droplet_region line to server_vars.yml file locally on AWX
  delegate_to: 127.0.0.1
  lineinfile:
    path: '/var/lib/awx/projects/clients/{{ member_id }}/{{ subscription_id }}/server_vars.yml'
    line: 'do_droplet_region: {{ do_droplet_region }}'
    mode: '0600'
    state: present
    create: yes
  when: subscription_type == "digitalocean"

- name: Add do_droplet_id line to server_vars.yml file locally on AWX
  delegate_to: 127.0.0.1
  lineinfile:
    path: '/var/lib/awx/projects/clients/{{ member_id }}/{{ subscription_id }}/server_vars.yml'
    line: 'do_droplet_id: {{ new_server_info.data.droplet.id }}'
    mode: '0600'
    state: present
  when: subscription_type == "digitalocean"

- name: Add matrix_domain line to server_vars.yml file locally on AWX
  delegate_to: 127.0.0.1
  lineinfile:
    path: '/var/lib/awx/projects/clients/{{ member_id }}/{{ subscription_id }}/server_vars.yml'
    line: 'matrix_domain: {{ matrix_domain }}'
    mode: '0600'
    state: present

- name: Add slug_size line to server_vars.yml file locally on AWX
  delegate_to: 127.0.0.1
  lineinfile:
    path: '/var/lib/awx/projects/clients/{{ member_id }}/{{ subscription_id }}/server_vars.yml'
    regexp: "^{{ item.key | regex_escape() }}:"
    line: "{{ item.key }}: {{ item.value }}"
    mode: '0600'
    state: present
  with_dict:
    'slug_size': '"{{ new_slug_size }}"'
  when: subscription_type == "digitalocean"

# Append to server_vars.yml variable file (updatable)

- name: Add do_droplet_region line to server_vars.yml file locally on AWX
  delegate_to: 127.0.0.1
  lineinfile:
    dest: '/var/lib/awx/projects/clients/{{ member_id }}/{{ subscription_id }}/server_vars.yml'
    line: 'do_droplet_region: {{ do_droplet_region }}'
    mode: '0600'
    state: present
  when: subscription_type == "digitalocean"

- name: Add server_ipv4 line to server_vars.yml file locally on AWX
  delegate_to: 127.0.0.1
  lineinfile:
    path: '/var/lib/awx/projects/clients/{{ member_id }}/{{ subscription_id }}/server_vars.yml'
    regexp: "^#? *{{ item.key | regex_escape() }}:"
    line: "{{ item.key }}: {{ item.value }}"
    mode: '0600'
    state: present
  with_dict:
    'server_ipv4': '"{{ server_ipv4 }}"'
  when: server_ipv4|length > 0

- name: Add server_ipv6 line to server_vars.yml file locally on AWX
  delegate_to: 127.0.0.1
  lineinfile:
    path: '/var/lib/awx/projects/clients/{{ member_id }}/{{ subscription_id }}/server_vars.yml'
    regexp: "^#? *{{ item.key | regex_escape() }}:"
    line: "{{ item.key }}: {{ item.value }}"
    mode: '0600'
    state: present
  with_dict:
    'server_ipv6': '"{{ server_ipv6 }}"'
  when: server_ipv6|length > 0

- name: Add plan_title line to server_vars.yml file locally on AWX
  delegate_to: 127.0.0.1
  lineinfile:
    path: '/var/lib/awx/projects/clients/{{ member_id }}/{{ subscription_id }}/server_vars.yml'
    regexp: "^#? *{{ item.key | regex_escape() }}:"
    line: "{{ item.key }}: {{ item.value }}"
    mode: '0600'
    state: present
  with_dict:
    'plan_title': '"{{ plan_title }}"'
  register: set_plan_title
  when: plan_title is defined

- name: Wait for ssh connection to become available, with 5 seconds between checks
  delegate_to: "{{ server_ip_final }}"
  wait_for_connection:
    sleep: 5

- name: Create /matrix/awx config directory
  delegate_to: "{{ server_ip_final }}"
  file:
    path: /matrix/awx
    state: directory
    mode: '0700'

# Append to extra_vars.json variable file for launching deploy scripts

- name: Update plan_title line to extra_vars.json file locally on AWX
  delegate_to: 127.0.0.1
  lineinfile:
    insertafter: '{'
    path: '/var/lib/awx/projects/clients/{{ member_id }}/{{ subscription_id }}/extra_vars.json'
    regexp: "^  {{ item.key | regex_escape() }}:"
    line: "  {{ item.key }}: {{ item.value }}"
    mode: '0600'
    state: present
  with_dict:
    '"plan_title"': '"{{ plan_title }}"'
  register: set_plan_title

- name: Add target line to extra_vars.json file locally on AWX
  delegate_to: 127.0.0.1
  lineinfile:
    insertafter: '{'
    path: '/var/lib/awx/projects/clients/{{ member_id }}/{{ subscription_id }}/extra_vars.json'
    line: '  "target": "matrix.{{ matrix_domain }}",'
    mode: '0600'
    state: present

- name: Add matrix_domain line to extra_vars.json file locally on AWX
  delegate_to: 127.0.0.1
  lineinfile:
    insertafter: '{'
    path: '/var/lib/awx/projects/clients/{{ member_id }}/{{ subscription_id }}/extra_vars.json'
    line: '  "matrix_domain": "{{ matrix_domain }}",'
    mode: '0600'
    state: present

- name: Add matrix_awx_enabled line to extra_vars.json file locally on AWX
  delegate_to: 127.0.0.1
  lineinfile:
    insertafter: '{'
    path: '/var/lib/awx/projects/clients/{{ member_id }}/{{ subscription_id }}/extra_vars.json'
    line: '  "matrix_awx_enabled": "true",'
    mode: '0600'
    state: present

# Create matrix_vars.yml variable file

- name: Install password generation script
  delegate_to: 127.0.0.1
  copy:
    src: ./roles/spawn-server/scripts/generate-initial-passwords.sh
    dest: /var/lib/awx/projects/hosting/generate-initial-passwords.sh
    mode: '0700'

- name: Check if matrix_vars.yml file already exists on AWX
  delegate_to: 127.0.0.1
  stat: 
    path: '/var/lib/awx/projects/clients/{{ member_id }}/{{ subscription_id }}/matrix_vars.yml'
  register: varsfile

- name: Generate initial matrix_vars.yml on AWX if it does not exist
  delegate_to: 127.0.0.1
  command: /var/lib/awx/projects/hosting/generate-initial-passwords.sh "{{ matrix_domain }}" "{{ element_subdomain }}" "{{ client_email }}" "/var/lib/awx/projects/clients/{{ member_id }}/{{ subscription_id }}/matrix_vars.yml"
  when: varsfile.stat.exists == false
  
- name: Insert certbot email value
  delegate_to: 127.0.0.1
  lineinfile:
    path: '/var/lib/awx/projects/clients/{{ member_id }}/{{ subscription_id }}/matrix_vars.yml'
    regexp: "^#? *{{ item.key | regex_escape() }}:"
    line: "{{ item.key }}: {{ item.value }}"
    insertafter: '# Basic Settings Start'
    mode: '0600'
    state: present
  with_dict:
    'matrix_ssl_lets_encrypt_support_email': '{{ certbot_email }}'

- name: Overwrite Element subdomain value if changed
  delegate_to: 127.0.0.1
  lineinfile:
    path: '/var/lib/awx/projects/clients/{{ member_id }}/{{ subscription_id }}/matrix_vars.yml'
    regexp: "^#? *{{ item.key | regex_escape() }}:"
    line: "{{ item.key }}: {{ item.value }}"
    insertafter: '# Element Settings Start'
    mode: '0600'
    state: present
  with_dict:
    'matrix_server_fqn_element': '{{ element_subdomain }}.{{ matrix_domain }}'
  when: varsfile.stat.exists == true

- name: Overwrite client_email value if changed
  delegate_to: 127.0.0.1
  lineinfile:
    path: '/var/lib/awx/projects/clients/{{ member_id }}/{{ subscription_id }}/matrix_vars.yml'
    regexp: "^#? *{{ item.key | regex_escape() }}:"
    line: "  {{ item.key }}: {{ item.value }}"
    insertafter: '# Synapse Extension Start'
    mode: '0600'
    state: present
  with_dict:
    'admin_contact': "'mailto:{{ client_email }}'"
  when: varsfile.stat.exists == true

- name: Add matrix_mailer values
  delegate_to: 127.0.0.1
  lineinfile:
    path: '/var/lib/awx/projects/clients/{{ member_id }}/{{ subscription_id }}/matrix_vars.yml'
    regexp: "^#? *{{ item.key | regex_escape() }}:"
    line: "{{ item.key }}: {{ item.value }}"
    insertafter: '# Email Settings Start'
    mode: '0600'
    state: present
  with_dict:
    'matrix_mailer_relay_auth_username': '{{ matrix_domain }}@{{ mg_sender_domain }}'
    'matrix_mailer_sender_address': '{{ mg_sender_email_address }}'
    'matrix_mailer_relay_host_name': '{{ mg_relay_host_name }}'

- name: Add matrix_nginx_proxy_base_domain_serving_enabled line to matrix_vars.yml file locally on AWX
  delegate_to: 127.0.0.1
  lineinfile:
    path: '/var/lib/awx/projects/clients/{{ member_id }}/{{ subscription_id }}/matrix_vars.yml'
    insertafter: '# Base Domain Settings Start'
    regexp: "^#? *{{ item.key | regex_escape() }}:"
    line: "{{ item.key }}: {{ item.value }}"
    mode: '0600'
    state: present
  with_dict:
    'matrix_nginx_proxy_base_domain_serving_enabled': 'false'
  when: base_domain_used|bool == true

- name: Add matrix_nginx_proxy_base_domain_serving_enabled line to matrix_vars.yml file locally on AWX
  delegate_to: 127.0.0.1
  lineinfile:
    path: '/var/lib/awx/projects/clients/{{ member_id }}/{{ subscription_id }}/matrix_vars.yml'
    insertafter: '# Base Domain Settings Start'
    regexp: "^#? *{{ item.key | regex_escape() }}:"
    line: "{{ item.key }}: {{ item.value }}"
    mode: '0600'
    state: present
  with_dict:
    'matrix_nginx_proxy_base_domain_serving_enabled': 'true'
  when: base_domain_used|bool == false

- name: Add matrix_nginx_proxy_base_domain_homepage_enabled line to matrix_vars.yml file locally on AWX
  delegate_to: 127.0.0.1
  lineinfile:
    path: '/var/lib/awx/projects/clients/{{ member_id }}/{{ subscription_id }}/matrix_vars.yml'
    insertafter: '# Base Domain Settings Start'
    regexp: "^#? *{{ item.key | regex_escape() }}:"
    line: "{{ item.key }}: {{ item.value }}"
    mode: '0600'
    state: present
  with_dict:
    'matrix_nginx_proxy_base_domain_homepage_enabled': 'true'
  when: base_domain_used|bool == false
  
- name: Add matrix_nginx_proxy_base_domain_homepage_enabled line to matrix_vars.yml file locally on AWX
  delegate_to: 127.0.0.1
  lineinfile:
    path: '/var/lib/awx/projects/clients/{{ member_id }}/{{ subscription_id }}/matrix_vars.yml'
    insertafter: '# Base Domain Settings Start'
    regexp: "^#? *{{ item.key | regex_escape() }}:"
    line: "{{ item.key }}: {{ item.value }}"
    mode: '0600'
    state: present
  with_dict:
    'matrix_nginx_proxy_base_domain_homepage_enabled': 'false'
  when: base_domain_used|bool == true

- name: Add matrix_jitsi_timezone line to matrix_vars.yml file locally on AWX
  delegate_to: 127.0.0.1
  lineinfile:
    path: '/var/lib/awx/projects/clients/{{ member_id }}/{{ subscription_id }}/matrix_vars.yml'
    insertafter: '# Jitsi Settings Start'
    line: 'matrix_jitsi_timezone: "{{ matrix_jitsi_timezone }}"'
    mode: '0600'
    state: present
  when: matrix_jitsi_timezone is defined

- name: Disable Jitsi by default if Micro to Medium Server
  delegate_to: 127.0.0.1
  lineinfile:
    path: '/var/lib/awx/projects/clients/{{ member_id }}/{{ subscription_id }}/matrix_vars.yml'
    insertafter: '# Jitsi Settings Start'
    line: 'matrix_jitsi_enabled: false'
    mode: '0600'
    state: present
  when: (varsfile.stat.exists == false) and (plan_title == "Micro DigitalOcean Server" or plan_title == "Micro On-Premises Server" or plan_title == "Small DigitalOcean Server" or plan_title == "Small On-Premises Server" or plan_title == "Medium DigitalOcean Server" or plan_title == "Medium On-Premises Server")

- name: Enable Jitsi by default if Large to Jumbo 5000 Server
  delegate_to: 127.0.0.1
  lineinfile:
    path: '/var/lib/awx/projects/clients/{{ member_id }}/{{ subscription_id }}/matrix_vars.yml'
    insertafter: '# Jitsi Settings Start'
    line: 'matrix_jitsi_enabled: true'
    mode: '0600'
    state: present
  when: (varsfile.stat.exists == false) and (plan_title == "Large DigitalOcean Server" or plan_title == "Large On-Premises Server" or plan_title == "Jumbo 500 DigitalOcean Server" or plan_title == "Jumbo 500 On-Premises Server" or plan_title == "Jumbo 1000 DigitalOcean Server" or plan_title == "Jumbo 1000 On-Premises Server" or plan_title == "Jumbo 2000 DigitalOcean Server" or plan_title == "Jumbo 2000 On-Premises Server" or plan_title == "Jumbo 5000 DigitalOcean Server" or plan_title == "Jumbo 5000 On-Premises Server")

- name: Add Postgresql tuning for Micro Server (s-1vcpu-2gb)
  delegate_to: 127.0.0.1
  blockinfile:
    path: '/var/lib/awx/projects/clients/{{ member_id }}/{{ subscription_id }}/matrix_vars.yml'
    insertafter: "# PostgreSQL Settings Start"
    block: |
      matrix_postgres_process_extra_arguments: [
        "-c max_connections=100",
        "-c shared_buffers=256MB",
        "-c effective_cache_size=768MB",
        "-c maintenance_work_mem=64MB",
        "-c checkpoint_completion_target=0.9",
        "-c wal_buffers=7864kB",
        "-c default_statistics_target=100",
        "-c random_page_cost=1.1",
        "-c effective_io_concurrency=200",
        "-c work_mem=327kB",
        "-c min_wal_size=1GB",
        "-c max_wal_size=4GB",
        "-c synchronous_commit=off"
      ]
  when: (plan_title == "Micro DigitalOcean Server" or plan_title == "Micro On-Premises Server")
      
- name: Add Postgresql tuning for Small Server (s-2vcpu-4gb)
  delegate_to: 127.0.0.1
  blockinfile:
    path: '/var/lib/awx/projects/clients/{{ member_id }}/{{ subscription_id }}/matrix_vars.yml'
    insertafter: "# PostgreSQL Settings Start"
    block: |
      matrix_postgres_process_extra_arguments: [
        "-c max_connections=100",
        "-c shared_buffers=512MB",
        "-c effective_cache_size=1536MB",
        "-c maintenance_work_mem=128MB",
        "-c checkpoint_completion_target=0.9",
        "-c wal_buffers=16MB",
        "-c default_statistics_target=100",
        "-c random_page_cost=1.1",
        "-c effective_io_concurrency=200",
        "-c work_mem=655kB",
        "-c min_wal_size=1GB",
        "-c max_wal_size=4GB",
        "-c max_worker_processes=2",
        "-c max_parallel_workers_per_gather=1",
        "-c max_parallel_workers=2",
        "-c max_parallel_maintenance_workers=1",
        "-c synchronous_commit=off"
      ]
  when: (plan_title == "Small DigitalOcean Server" or plan_title == "Small On-Premises Server")
  
- name: Add Postgresql tuning for Medium Server (s-4vcpu-8gb)
  delegate_to: 127.0.0.1
  blockinfile:
    path: '/var/lib/awx/projects/clients/{{ member_id }}/{{ subscription_id }}/matrix_vars.yml'
    insertafter: "# PostgreSQL Settings Start"
    block: |
      matrix_postgres_process_extra_arguments: [
        "-c max_connections=100",
        "-c shared_buffers=1GB",
        "-c effective_cache_size=3GB",
        "-c maintenance_work_mem=256MB",
        "-c checkpoint_completion_target=0.9",
        "-c wal_buffers=16MB",
        "-c default_statistics_target=100",
        "-c random_page_cost=1.1",
        "-c effective_io_concurrency=200",
        "-c work_mem=1310kB",
        "-c min_wal_size=1GB",
        "-c max_wal_size=4GB",
        "-c max_worker_processes=4",
        "-c max_parallel_workers_per_gather=2",
        "-c max_parallel_workers=4",
        "-c max_parallel_maintenance_workers=2",
        "-c synchronous_commit=off"
      ]
  when: (plan_title == "Medium DigitalOcean Server" or plan_title == "Medium On-Premises Server")

- name: Add Postgresql tuning for Large Server (s-8vcpu-16gb)
  delegate_to: 127.0.0.1
  blockinfile:
    path: '/var/lib/awx/projects/clients/{{ member_id }}/{{ subscription_id }}/matrix_vars.yml'
    insertafter: "# PostgreSQL Settings Start"
    block: |
      matrix_postgres_process_extra_arguments: [
        "-c max_connections=100",
        "-c shared_buffers=2GB",
        "-c effective_cache_size=6GB",
        "-c maintenance_work_mem=512MB",
        "-c checkpoint_completion_target=0.9",
        "-c wal_buffers=16MB",
        "-c default_statistics_target=100",
        "-c random_page_cost=1.1",
        "-c effective_io_concurrency=200",
        "-c work_mem=2621kB",
        "-c min_wal_size=1GB",
        "-c max_wal_size=4GB",
        "-c max_worker_processes=8",
        "-c max_parallel_workers_per_gather=4",
        "-c max_parallel_workers=8",
        "-c max_parallel_maintenance_workers=4",
        "-c synchronous_commit=off"
      ]
  when: (plan_title == "Large DigitalOcean Server" or plan_title == "Large On-Premises Server")

- name: Add Postgresql tuning for Jumbo 500 Server (so-8vcpu-64gb)
  delegate_to: 127.0.0.1
  blockinfile:
    path: '/var/lib/awx/projects/clients/{{ member_id }}/{{ subscription_id }}/matrix_vars.yml'
    insertafter: "# PostgreSQL Settings Start"
    block: |
      matrix_postgres_process_extra_arguments: [
        "-c max_connections=200",
        "-c shared_buffers=8GB",
        "-c effective_cache_size=24GB",
        "-c maintenance_work_mem=2GB",
        "-c checkpoint_completion_target=0.9",
        "-c wal_buffers=16MB",
        "-c default_statistics_target=100",
        "-c random_page_cost=1.1",
        "-c effective_io_concurrency=200",
        "-c work_mem=10485kB",
        "-c min_wal_size=1GB",
        "-c max_wal_size=4GB",
        "-c max_worker_processes=8",
        "-c max_parallel_workers_per_gather=4",
        "-c max_parallel_workers=8",
        "-c max_parallel_maintenance_workers=4",
        "-c synchronous_commit=off"
      ]
  when: (plan_title == "Jumbo 500 DigitalOcean Server" or plan_title == "Jumbo 500 On-Premises Server")
  
- name: Add Postgresql tuning for Jumbo 1000 Server (so-16vcpu-128gb)
  delegate_to: 127.0.0.1
  blockinfile:
    path: '/var/lib/awx/projects/clients/{{ member_id }}/{{ subscription_id }}/matrix_vars.yml'
    insertafter: "# PostgreSQL Settings Start"
    block: |
      matrix_postgres_process_extra_arguments: [
        "-c max_connections=200",
        "-c shared_buffers=16GB",
        "-c effective_cache_size = 48GB",
        "-c maintenance_work_mem = 2GB",
        "-c checkpoint_completion_target=0.9",
        "-c wal_buffers=16MB",
        "-c default_statistics_target=100",
        "-c random_page_cost=1.1",
        "-c effective_io_concurrency=200",
        "-c work_mem=20971kB",
        "-c min_wal_size=1GB",
        "-c max_wal_size=4GB",
        "-c max_worker_processes=16",
        "-c max_parallel_workers_per_gather=4",
        "-c max_parallel_workers=16",
        "-c max_parallel_maintenance_workers=4",
        "-c synchronous_commit=off"
      ]
  when: (plan_title == "Jumbo 1000 DigitalOcean Server" or plan_title == "Jumbo 1000 On-Premises Server")
  
- name: Add Postgresql tuning for Jumbo 2000 Server (so-24vcpu-192gb)
  delegate_to: 127.0.0.1
  blockinfile:
    path: '/var/lib/awx/projects/clients/{{ member_id }}/{{ subscription_id }}/matrix_vars.yml'
    insertafter: "# PostgreSQL Settings Start"
    block: |
      matrix_postgres_process_extra_arguments: [
        "-c max_connections=200",
        "-c shared_buffers=24GB",
        "-c effective_cache_size = 72GB",
        "-c maintenance_work_mem = 2GB",
        "-c checkpoint_completion_target=0.9",
        "-c wal_buffers=16MB",
        "-c default_statistics_target=100",
        "-c random_page_cost=1.1",
        "-c effective_io_concurrency=200",
        "-c work_mem=31457kB",
        "-c min_wal_size=1GB",
        "-c max_wal_size=4GB",
        "-c max_worker_processes=24",
        "-c max_parallel_workers_per_gather=4",
        "-c max_parallel_workers=24",
        "-c max_parallel_maintenance_workers=4",
        "-c synchronous_commit=off"
      ]
  when: (plan_title == "Jumbo 2000 DigitalOcean Server" or plan_title == "Jumbo 2000 On-Premises Server")
  
- name: Add Postgresql tuning for Jumbo 5000 Server (so-32vcpu-256gb)
  delegate_to: 127.0.0.1
  blockinfile:
    path: '/var/lib/awx/projects/clients/{{ member_id }}/{{ subscription_id }}/matrix_vars.yml'
    insertafter: "# PostgreSQL Settings Start"
    block: |
      matrix_postgres_process_extra_arguments: [
        "-c max_connections=200",
        "-c shared_buffers=32GB",
        "-c effective_cache_size = 96GB",
        "-c maintenance_work_mem = 2GB",
        "-c checkpoint_completion_target=0.9",
        "-c wal_buffers=16MB",
        "-c default_statistics_target=100",
        "-c random_page_cost=1.1",
        "-c effective_io_concurrency=200",
        "-c work_mem=41943kB",
        "-c min_wal_size=1GB",
        "-c max_wal_size=4GB",
        "-c max_worker_processes=32",
        "-c max_parallel_workers_per_gather=4",
        "-c max_parallel_workers=32",
        "-c max_parallel_maintenance_workers=4",
        "-c synchronous_commit=off"
      ]
  when: (plan_title == "Jumbo 5000 DigitalOcean Server" or plan_title == "Jumbo 5000 On-Premises Server")

- name: Disable Synapse workers if plan_title is medium or smaller
  delegate_to: 127.0.0.1
  lineinfile:
    path: '/var/lib/awx/projects/clients/{{ member_id }}/{{ subscription_id }}/matrix_vars.yml'
    regexp: "^#? *{{ item.key | regex_escape() }}:"
    line: "{{ item.key }}: {{ item.value }}"
    insertafter: '# Synapse Settings Start'
    mode: '0600'
    state: present
  with_dict:
    'matrix_synapse_workers_enabled': 'false'
  when: (plan_title == "Medium DigitalOcean Server" or plan_title == "Medium On-Premises Server" or plan_title == "Small DigitalOcean Server" or plan_title == "Small On-Premises Server" or plan_title == "Micro DigitalOcean Server" or plan_title == "Micro On-Premises Server")
     
- name: Enable Synapse workers settings if plan_title is large or greater
  delegate_to: 127.0.0.1
  lineinfile:
    path: '/var/lib/awx/projects/clients/{{ member_id }}/{{ subscription_id }}/matrix_vars.yml'
    regexp: "^#? *{{ item.key | regex_escape() }}:"
    line: "{{ item.key }}: {{ item.value }}"
    insertafter: '# Synapse Settings Start'
    mode: '0600'
    state: present
  with_dict:
    'matrix_synapse_workers_enabled': 'true'
  when: (plan_title == "Large DigitalOcean Server" or plan_title == "Large On-Premises Server" or plan_title == "Jumbo 500 DigitalOcean Server" or plan_title == "Jumbo 500 On-Premises Server" or plan_title == "Jumbo 1000 DigitalOcean Server" or plan_title == "Jumbo 1000 On-Premises Server" or plan_title == "Jumbo 2000 DigitalOcean Server" or plan_title == "Jumbo 2000 On-Premises Server" or plan_title == "Jumbo 5000 DigitalOcean Server" or plan_title == "Jumbo 5000 On-Premises Server")

- name: Set 'little-federation-helper' worker setting if plan_title is large
  delegate_to: 127.0.0.1
  lineinfile:
    path: '/var/lib/awx/projects/clients/{{ member_id }}/{{ subscription_id }}/matrix_vars.yml'
    regexp: "^#? *{{ item.key | regex_escape() }}:"
    line: "{{ item.key }}: {{ item.value }}"
    insertafter: '# Synapse Settings Start'
    mode: '0600'
    state: present
  with_dict:
    'matrix_synapse_workers_preset': 'little-federation-helper'
  when: (plan_title == "Large DigitalOcean Server" or plan_title == "Large On-Premises Server")

- name: Set 'one-of-each' worker setting if plan_title is jumbo or greater
  delegate_to: 127.0.0.1
  lineinfile:
    path: '/var/lib/awx/projects/clients/{{ member_id }}/{{ subscription_id }}/matrix_vars.yml'
    regexp: "^#? *{{ item.key | regex_escape() }}:"
    line: "{{ item.key }}: {{ item.value }}"
    insertafter: '# Synapse Settings Start'
    mode: '0600'
    state: present
  with_dict:
    'matrix_synapse_workers_preset': 'one-of-each'
  when: (plan_title == "Jumbo 500 DigitalOcean Server" or plan_title == "Jumbo 500 On-Premises Server" or plan_title == "Jumbo 1000 DigitalOcean Server" or plan_title == "Jumbo 1000 On-Premises Server" or plan_title == "Jumbo 2000 DigitalOcean Server" or plan_title == "Jumbo 2000 On-Premises Server" or plan_title == "Jumbo 5000 DigitalOcean Server" or plan_title == "Jumbo 5000 On-Premises Server")

- name: Overwrite room complexity limit for Micro Server
  delegate_to: 127.0.0.1
  lineinfile:
    path: '/var/lib/awx/projects/clients/{{ member_id }}/{{ subscription_id }}/matrix_vars.yml'
    regexp: "^#? *{{ item.key | regex_escape() }}:"
    line: "{{ item.key }}: {{ item.value }}"
    insertafter: '# Synapse Extension Start'
    mode: '0600'
    state: present
  with_dict:
    '    complexity': '10.0'
  when: (plan_title == "Micro DigitalOcean Server" or plan_title == "Micro On-Premises Server")

- name: Overwrite room complexity limit for Small Server
  delegate_to: 127.0.0.1
  lineinfile:
    path: '/var/lib/awx/projects/clients/{{ member_id }}/{{ subscription_id }}/matrix_vars.yml'
    regexp: "^#? *{{ item.key | regex_escape() }}:"
    line: "{{ item.key }}: {{ item.value }}"
    insertafter: '# Synapse Extension Start'
    mode: '0600'
    state: present
  with_dict:
    '    complexity': '20.0'
  when: (plan_title == "Small DigitalOcean Server" or plan_title == "Small On-Premises Server")

- name: Overwrite room complexity limit for Medium Server
  delegate_to: 127.0.0.1
  lineinfile:
    path: '/var/lib/awx/projects/clients/{{ member_id }}/{{ subscription_id }}/matrix_vars.yml'
    regexp: "^#? *{{ item.key | regex_escape() }}:"
    line: "{{ item.key }}: {{ item.value }}"
    insertafter: '# Synapse Extension Start'
    mode: '0600'
    state: present
  with_dict:
    '    complexity': '50.0'
  when: (plan_title == "Medium DigitalOcean Server" or plan_title == "Medium On-Premises Server")

- name: Overwrite room complexity limit for Large Server
  delegate_to: 127.0.0.1
  lineinfile:
    path: '/var/lib/awx/projects/clients/{{ member_id }}/{{ subscription_id }}/matrix_vars.yml'
    regexp: "^#? *{{ item.key | regex_escape() }}:"
    line: "{{ item.key }}: {{ item.value }}"
    insertafter: '# Synapse Extension Start'
    mode: '0600'
    state: present
  with_dict:
    '    complexity': '100.0'
  when: (plan_title == "Large DigitalOcean Server" or plan_title == "Large On-Premises Server")

- name: Disable room complexity limit for Jumbo Servers
  delegate_to: 127.0.0.1
  lineinfile:
    path: '/var/lib/awx/projects/clients/{{ member_id }}/{{ subscription_id }}/matrix_vars.yml'
    regexp: "^#? *{{ item.key | regex_escape() }}:"
    line: "{{ item.key }}: {{ item.value }}"
    insertafter: '  limit_remote_rooms:'
    mode: '0600'
    state: present
  with_dict:
    '    enabled': 'false'
  when: (plan_title == "Jumbo 500 DigitalOcean Server" or plan_title == "Jumbo 500 On-Premises Server" or plan_title == "Jumbo 1000 DigitalOcean Server" or plan_title == "Jumbo 1000 On-Premises Server" or plan_title == "Jumbo 2000 DigitalOcean Server" or plan_title == "Jumbo 2000 On-Premises Server" or plan_title == "Jumbo 5000 DigitalOcean Server" or plan_title == "Jumbo 5000 On-Premises Server")

# Create borg backup key file

- name: Generate borg backup password
  delegate_to: 127.0.0.1
  shell: openssl rand -hex 16
  register: borg_password
  no_log: True

- name: Check if borg_backup.yml already exists
  delegate_to: 127.0.0.1
  stat:
    path: '/var/lib/awx/projects/clients/{{ member_id }}/{{ subscription_id }}/borg_backup.yml'
  register: borg_backup_file

- name: Add entry to borg_backup.yml file locally on AWX
  delegate_to: 127.0.0.1
  lineinfile:
    path: '/var/lib/awx/projects/clients/{{ member_id }}/{{ subscription_id }}/borg_backup.yml'
    line: 'matrix_awx_backup_encryption_passphrase: {{ borg_password.stdout }}'
    mode: '0600'
    state: present
    create: yes
  when: not borg_backup_file.stat.exists

- name: Copy borg_backup.yml variables file to backup location
  delegate_to: 127.0.0.1
  copy:
    src: '/var/lib/awx/projects/clients/{{ member_id }}/{{ subscription_id }}/borg_backup.yml'
    dest: '/var/lib/awx/projects/backups/{{ matrix_domain }}-borg_backup.yml'
    mode: '0660'

# Copy organisation.yml, server_vars.yml, extra_vars.json, matrix_vars.yml

- name: Copy organisation.yml variables file to target
  delegate_to: "{{ server_ip_final }}"
  copy:
    src: '/var/lib/awx/projects/clients/{{ member_id }}/organisation.yml'
    dest: /matrix/awx/organisation.yml
    mode: '0660'

- name: Copy server_vars.yml variables file to target
  delegate_to: "{{ server_ip_final }}"
  copy:
    src: '/var/lib/awx/projects/clients/{{ member_id }}/{{ subscription_id }}/server_vars.yml'
    dest: /matrix/awx/server_vars.yml
    mode: '0660'

- name: Copy extra_vars.json variables file to target
  delegate_to: "{{ server_ip_final }}"
  copy:
    src: '/var/lib/awx/projects/clients/{{ member_id }}/{{ subscription_id }}/extra_vars.json'
    dest: /matrix/awx/extra_vars.json
    mode: '0660'

- name: Copy matrix_vars.yml variables file to target
  delegate_to: "{{ server_ip_final }}"
  copy:
    src: '/var/lib/awx/projects/clients/{{ member_id }}/{{ subscription_id }}/matrix_vars.yml'
    dest: /matrix/awx/matrix_vars.yml
    mode: '0660'

